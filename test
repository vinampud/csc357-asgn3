#define _GNU_SOURCE
#include "tree.h"
#include <sys/stat.h>
#include <unistd.h>
#include <inttypes.h>
#include <dirent.h>
#include <dirent.h>
#include <fcntl.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <ctype.h>
#define NUM_BYTES 1024

// main takes in command line argument, second argument will be the directory we need to be in (validate args with >4)
// if 2, take in arg[1] as dir of file name

// - if opendir doesn't work, it's a file --> print the name
// - else chdir into this directory
// - while readdir != null, keep printing recursively

// switches, must be in arg[2], or both args[2] and args[3]:
// -a: if starts with ., 
// -s: if detec ted, use qsort on directory entries in each directory, print the sizes using stat

// every time you open a file/dir, increment the count, everytime you close it, decrment it


//create new arraylist 
//read contents of directory and add to arraylist
//close directory
//sort arraylist
//read arraylist
    //if file print
    //if directory, print and call function again

struct array * array_list_new(int c){
    struct array *a = malloc(sizeof(struct array));
    a->capacity = c;
    a->length = 0;
    a->list = malloc(c * sizeof(char *));
    return a;

}

void array_list_add_to_end(struct array * a, char * s){
    if (a->length >= a->capacity){
        a->capacity *= 2;
        a->list = realloc(a->list, a->capacity * sizeof(char*));
    }

    a->list[a->length] = s;
    a->length++;

}

void print_size(char *name){
    struct stat st; 
    off_t s = 0;

    stat(name, &st);
    s = st.st_size;
    printf("[size: %lld]\n", (long long)s);
}

int compare (const void *arg1, const void *arg2)                                
{                                                                               
               /* Compare all of both strings */                                
   return(strcmp(*(char **)arg1, *(char **)arg2));                              
}

void print_tree(char *dirname, int space, int hidden, int size){

    DIR *dir;
    FILE *f;
    struct dirent * entry;
    struct array * sorter = array_list_new(10);
    int s;
    char path[NUM_BYTES];

    dir = opendir(dirname);
    if(!dir){
        return;
    }

    else{
        printf("--TEST-- %s\n", dirname);
        while ((entry = readdir(dir)) != NULL) {
            
            
            if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0){
                    continue;
                }


            if(!hidden && ((entry->d_name)[0] == '.')){
                continue;
            }
            
            //update path of whatever content we're looking at and add to array list
            //snprintf(path, sizeof(path), "%s/%s", dirname, entry->d_name);
            array_list_add_to_end(sorter, entry->d_name);
        

        }

        closedir(dir);
        
        //sort alphabetically
        qsort(sorter->list, sorter->length, sizeof(sorter->list[0]), compare);

        DIR *aldir;
        struct dirent * alentry;

        //open directory again
        dir = opendir(dirname);

        if(!dir){
            return;
        }

        else{
           
            if (size){
                print_size(dirname);
            }

            else{
                printf("\n");
            
            }

        }

        int i;
        for (i = 0; i < sorter->length; i++){
            char * curname = sorter->list[i];
            aldir = opendir(curname);
            //open directory

            if(!aldir){ //regular file
                if (space == 0){
                    printf("|%*s-- %s ", space, "", curname);
                }
                else{
                    printf("|%*s|-- %s ", space, "", curname);
                }

                if (size){
                    
                    print_size(curname);
                }

                else{
                    printf("\n");
                }
            }

            else{ //directory

                if (size){
                    
                    print_size(curname);
                }

                else{
                        printf("\n");
                        
                }

                //read current directory in array list
                while ((alentry = readdir(aldir)) != NULL) {
                    
                    
                    if (strcmp(alentry->d_name, ".") == 0 || strcmp(alentry->d_name, "..") == 0){
                            continue;
                        }

                    // . files

                    if(!hidden && ((alentry->d_name)[0] == '.')){
                        continue;
                    }
                    

                    char alpath[NUM_BYTES];
                    // if current content is of directory type, open it up and process its contents
                    if (alentry->d_type == DT_DIR) {

                        
                        //update path
                        snprintf(alpath, sizeof(alpath), "%s/%s", curname, alentry->d_name);
                        printf("LOOK HERE ---- %s\n", alpath);

                        //print directory name
                        if (space == 0){
                            printf("|%*s-- %s ", space, "", alentry->d_name);
                        }
                        else{
                            printf("|%*s|-- %s ", space, "", alentry->d_name);
                        }

                        
                        //recursive call to process this directory 
                        print_tree(alpath, space + 2, hidden, size);
                    } 


                }

                closedir(aldir);

                }
        }

    }

    closedir(dir);

}

int main(int argc, char *argv[]){
    //0 false, 1 true
    int i;
    int find_hidden = 0;
    int find_size = 0;
    int justcwd = 1;

    for (i = 1; i<argc; i++){
        if (strcmp(argv[i], "-a") == 0){
            find_hidden = 1;
        }

        else if (strcmp(argv[i], "-s") == 0){
            find_size = 1;
        }

        else {
            justcwd = 0;
        }
    }

    //if no directory/file specified in command prompt, print tree for cwd
    if(justcwd){
        printf("Current Working Directory: %s ", get_current_dir_name());
        print_tree(".", 0, find_hidden, find_size);
    }

    // call function and print a tree for every file specified on command prompt


    for (i = 1; i<argc; i++){
        if (strcmp(argv[i], "-a")!= 0 && strcmp(argv[i], "-s") != 0){
            printf("%s ", argv[i]);
            print_tree(argv[i], 0, find_hidden, find_size);
        }
    }


    return 0;

}